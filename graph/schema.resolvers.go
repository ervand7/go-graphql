package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"go-graphql/graph/generated"
	"go-graphql/graph/model"
)

// Author
// Here is the resolver that Graphql calls for each Book when the client
// requests Author {...}. He pulls up data on the author, eliminating Underfetching.
func (r *bookResolver) Author(ctx context.Context, obj *model.Book) (*model.Author, error) {
	// Find the inner book to find out its authorID
	var authorID string
	for _, bk := range books {
		if bk.ID == obj.ID {
			authorID = bk.AuthorID
			break
		}
	}
	a, ok := authors[authorID]
	if !ok {
		return nil, fmt.Errorf("author %s not found", authorID)
	}
	return &model.Author{ID: a.ID, Name: a.Name}, nil
}

// AddBook ---------- Mutation.addBook ----------
func (r *mutationResolver) AddBook(ctx context.Context, title string, authorID string) (*model.Book, error) {
	if _, ok := r.authors[authorID]; !ok {
		return nil, fmt.Errorf("author %s not found", authorID)
	}

	id := fmt.Sprintf("%d", len(r.books)+1)
	b := Book{ID: id, Title: title, AuthorID: authorID}
	r.books = append(r.books, b)

	return &model.Book{ID: b.ID, Title: b.Title}, nil
}

// Books ---------- Query.books ----------
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	out := make([]*model.Book, len(r.books))
	for i, b := range r.books {
		out[i] = &model.Book{
			ID:    b.ID,
			Title: b.Title,
			// the Author field will be filled with BookResolver.author
		}
	}
	return out, nil
}

// Book returns generated.BookResolver implementation.
func (r *Resolver) Book() generated.BookResolver { return &bookResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type bookResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
